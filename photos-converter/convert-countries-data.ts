import * as fse from 'fs-extra';
import * as path from 'path';
import { v4 as uuidv4 } from 'uuid';

import { countries } from './countries-data';

export type CountryIdMap = Record<string, string>;

export interface Country {
  'id': string;
  'name': string;
  'flag-1x1': string;
  'flag-4x3': string;
}

/**
 * Create a new list of countries with fresh UUIDs for each `id`.
 * Returns both the updated list and a mapping from oldId â†’ newId.
 */
export function regenerateCountryIds(
  data: Country[] = countries,
): { updatedCountries: Country[]; idMap: CountryIdMap } {
  const idMap: CountryIdMap = {};

  const updatedCountries: Country[] = data.map((country) => {
    const newId = uuidv4();
    idMap[country.id] = newId;
    return {
      ...country,
      id: newId,
    } as Country;
  });

  return { updatedCountries, idMap };
}

function formatCountriesTsFile(updated: Country[]): string {
  const header = `// This file is auto-generated by convert-countries-data.ts\n` +
    `// Do not edit manually.\n\n` +
    `export interface Country {\n` +
    `  'id': string;\n\n` +
    `  'name': string;\n\n` +
    `  'flag-1x1': string;\n\n` +
    `  'flag-4x3': string;\n` +
    `}\n\n`;

  // Serialize using JSON; TypeScript accepts double quotes in object literals
  const body = `export const countries: Country[] = ${JSON.stringify(updated, null, 2)};\n`;
  return header + body;
}

/**
 * Generate fresh UUIDs and write the result to a countries-data.ts file.
 * Returns the output file path and the number of countries written.
 */
export async function writeCountriesDataTs(
  outputFilePath?: string,
): Promise<{ outputFilePath: string; count: number }> {
  const baseDir = ((import.meta as any).dir as string | undefined) ?? path.resolve('.');

  const { updatedCountries } = regenerateCountryIds(countries);
  const content = formatCountriesTsFile(updatedCountries);

  const finalPath = outputFilePath ?? path.join(baseDir, 'countries-data.ts');
  await fse.ensureDir(path.dirname(finalPath));
  await fse.writeFile(finalPath, content, { encoding: 'utf8' });
  return { outputFilePath: finalPath, count: updatedCountries.length };
}

// Simple CLI: run `bun photos-converter/convert-countries-data.ts` to write countries-data.ts
// You can optionally pass `--out=relative/or/absolute/path.ts` to change the output location
if ((import.meta as any).main) {
  const argv = (((globalThis as any).process?.argv) as string[] | undefined) ?? [];
  const outArg = argv.find((a) => a.startsWith('--out='));
  const customOut = outArg ? outArg.slice('--out='.length) : undefined;

  writeCountriesDataTs(customOut)
    .then(({ outputFilePath, count }) => {
      console.log(`Wrote ${count} countries to: ${outputFilePath}`);
    })
    .catch((err) => {
      console.error('Failed to write countries-data.ts:', err);
      if ((globalThis as any).process) {
        (globalThis as any).process.exitCode = 1;
      }
    });
}
